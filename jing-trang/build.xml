<project name="jing-trang" default="jar">

<property name="lib.dir" value="lib"/>
<property name="build.dir" value="${basedir}/build"/>

<property name="moddir" value="mod"/>
<property name="modfile" value="mod.xml"/>

<target name="check-modules">
  <uptodate property="modules-ok" targetfile="modules.xml">
    <srcresources>
      <dirset dir="mod" includes=".,*"/>
    </srcresources>
  </uptodate>
</target>

<target name="modules" depends="check-modules" unless="modules-ok">
  <pathconvert property="modfrag" pathsep="&lt;/module>&#xA;&lt;module>">
    <fileset dir="${moddir}">
      <include name="*/${modfile}"/>
    </fileset>
    <globmapper from="${basedir}/${moddir}/*/${modfile}"
		to="*"
		handledirsep="true"/>
  </pathconvert>

  <echo file="modules.xml" encoding="UTF-8">&lt;modules>
&lt;module>${modfrag}&lt;/module>
&lt;/modules></echo>

</target>

<target name="check-modbuild">
  <uptodate property="modbuild-ok" targetfile="modbuild.xml">
    <srcfiles dir="${moddir}" includes="*/${modfile}"/>
    <srcfiles file="build.xsl"/>
    <srcfiles file="modules.xml"/>
  </uptodate>
</target>

<target name="modbuild" depends="modules,check-modbuild" unless="modbuild-ok">
  <xslt style="build.xsl" in="modules.xml" out="modbuild.xml"/>
</target>

<target name="jar" depends="modbuild">
  <ant antfile="modbuild.xml" target="jar"/>
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
    </classpath>
  </taskdef>
</target>

<target name="compile" depends="modbuild">
  <ant antfile="modbuild.xml" target="compile"/>
</target>

<target name="gen" depends="modbuild">
  <ant antfile="modbuild.xml" target="gen"/>
</target>

<target name="iml">
  <xslt style="iml.xsl"
	includes="${moddir}/*/${modfile}"
	filedirparameter="name"
	destdir=".">
    <regexpmapper from="mod/([-a-zA-Z0-9_]*)/mod.xml"
		  to="mod/\1/\1.iml"
		  handledirsep="true"/>
  </xslt>
</target>

<target name="init">
  <mkdir dir="${build.dir}"/>
  <mkdir dir="${build.dir}/dist"/>
  <property file="mod/rng-validate/src/main/com/thaiopensource/relaxng/util/resources/Version.properties"/>
</target>

<target name="validate" depends="jar" description="Validate all XML files" >
  <jing rngfile="xhtml/xhtml.rng">
    <fileset dir="doc" includes="*.html,jing-bin/*.html,regex/*.html"/>
    <fileset dir="datatype-sample" includes="index.html"/>
    <fileset dir="test" includes="index.html"/>
    <fileset dir="doc/compact" includes="*.html"/>
    <fileset dir="." includes="copying.html"/>
  </jing>
  <jing rngfile="eg/relaxng.rng">
    <fileset dir="eg" includes="*.rng"/>
    <fileset dir="xhtml" includes="**/*.rng"/>
  </jing>
  <jing rngfile="doc/compact/relaxng.rnc" compactsyntax="true">
    <fileset dir="eg" includes="relaxng.rng"/>
  </jing>
  <jing rngfile="eg/xslt.rng">
    <fileset dir="convert" includes="*.xsl"/>
  </jing>
  <jing rngfile="doc/design.rng">
    <fileset dir="doc" includes="design.xml"/>
  </jing>
  <jing rngfile="doc/nrl.rng">
    <fileset dir="doc" includes="nrl.xml"/>
  </jing>
</target>

<target name="test" depends="spec-test,mns-test,nrl-test,schematron-test,picl-test,xsd-test,regex-test,trang-test"
        description="Test all aspects of validation"/>

<target name="spec-split" depends="init, check-spec-split" unless="spec-split-not-required">
  <jing rngfile="eg/testSuite.rng">
    <fileset dir="test" includes="spectest.xml"/>
  </jing>
  <delete dir="${build.dir}/rngtest"/>
  <mkdir dir="${build.dir}/rngtest"/>
  <xslt basedir="test" destdir="${build.dir}/rngtest" includes="spectest.xml" extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/rngtest"/>
  </xslt>
</target>

<target name="check-spec-split">
  <uptodate property="spec-split-not-required" targetfile="${build.dir}/rngtest/spectest.stamp">
    <srcfiles dir="test" includes="spectest.xml"/>
  </uptodate>
</target>

<target name="spec-test" depends="jar,spec-split" description="Test conformance to the RELAX NG spec">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/rngtest/out.log"/>
    <arg value="${build.dir}/rngtest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="mns-split" depends="init,check-mns-split" unless="mns-split-not-required">
  <jing rngfile="test/mnstest.rng">
    <fileset dir="test" includes="mnstest.xml"/>
  </jing>
  <delete dir="${build.dir}/mnstest"/>
  <mkdir dir="${build.dir}/mnstest"/>
  <xslt basedir="test" destdir="${build.dir}/mnstest" includes="mnstest.xml" extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/mnstest"/>
  </xslt>
</target>

<target name="check-mns-split">
  <uptodate property="mns-split-not-required" targetfile="${build.dir}/mnstest/mnstest.stamp">
    <srcfiles dir="test" includes="mnstest.xml"/>
  </uptodate>
</target>

<target name="mns-test" depends="jar,mns-split" description="Test MNS validation">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/mnstest/out.log"/>
    <arg value="${build.dir}/mnstest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="nrl-split" depends="init,check-nrl-split" unless="nrl-split-not-required">
  <jing rngfile="test/nrltest.rng">
    <fileset dir="test" includes="nrltest.xml"/>
  </jing>
  <delete dir="${build.dir}/nrltest"/>
  <mkdir dir="${build.dir}/nrltest"/>
  <xslt basedir="test" destdir="${build.dir}/nrltest" includes="nrltest.xml" extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/nrltest"/>
  </xslt>
</target>

<target name="check-nrl-split">
  <uptodate property="nrl-split-not-required" targetfile="${build.dir}/nrltest/nrltest.stamp">
    <srcfiles dir="test" includes="nrltest.xml"/>
  </uptodate>
</target>

<target name="nrl-test" depends="jar,nrl-split" description="Test NRL validation">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/nrltest/out.log"/>
    <arg value="${build.dir}/nrltest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="schematron-split" depends="init,check-schematron-split" unless="schematron-split-not-required">
  <jing rngfile="test/schematrontest.nrl">
    <fileset dir="test" includes="schematrontest.xml"/>
  </jing>
  <delete dir="${build.dir}/schematrontest"/>
  <mkdir dir="${build.dir}/schematrontest"/>
  <xslt basedir="test" destdir="${build.dir}/schematrontest" includes="schematrontest.xml" extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/schematrontest"/>
  </xslt>
</target>

<target name="check-schematron-split">
  <uptodate property="schematron-split-not-required" targetfile="${build.dir}/schematrontest/schematrontest.stamp">
    <srcfiles dir="test" includes="schematrontest.xml"/>
  </uptodate>
</target>

<target name="schematron-test" depends="jar,schematron-split" description="Test Schematron validation">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/schematrontest/out.log"/>
    <arg value="${build.dir}/schematrontest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="picl-split" depends="init,check-picl-split" unless="picl-split-not-required">
  <jing rngfile="test/picltest.nrl">
    <fileset dir="test" includes="picltest.xml"/>
  </jing>
  <delete dir="${build.dir}/picltest"/>
  <mkdir dir="${build.dir}/picltest"/>
  <xslt basedir="test" destdir="${build.dir}/picltest" includes="picltest.xml" extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/picltest"/>
  </xslt>
</target>

<target name="check-picl-split">
  <uptodate property="picl-split-not-required" targetfile="${build.dir}/picltest/picltest.stamp">
    <srcfiles dir="test" includes="picltest.xml"/>
  </uptodate>
</target>

<target name="picl-test" depends="jar,picl-split" description="Test PICL validation">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/picltest/out.log"/>
    <arg value="${build.dir}/picltest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="xsd-test" depends="jar,xsd-split" description="Test the XML Schema Datatypes implementation">
  <java classname="com.thaiopensource.relaxng.util.TestDriver" fork="yes" failonerror="yes">
    <arg value="${build.dir}/xsdtest/out.log"/>
    <arg value="${build.dir}/xsdtest"/>
    <classpath>
      <pathelement location="${build.dir}/jing.jar"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </java>
</target>

<target name="check-xsd-split">
  <uptodate property="xsd-split-not-required" targetfile="${build.dir}/xsdtest/xsdtest.stamp">
    <srcfiles dir="test" includes="xsdtest.xml,xsdtest.xsl,xsdtest.rnc,split.xsl"/>
  </uptodate>
</target>


<target name="xsd-split" depends="jar,check-xsd-split" unless="xsd-split-not-required">
  <jing rngfile="test/xsdtest.rnc" compactsyntax="true">
    <fileset dir="test" includes="xsdtest.xml"/>
  </jing>
  <delete dir="${build.dir}/xsdtest"/>
  <mkdir dir="${build.dir}/xsdtest"/>
  <xslt basedir="test" destdir="${build.dir}/xsdtest" includes="xsdtest.xml" extension=".xml"
        style="test/xsdtest.xsl"/>
  <jing rngfile="eg/testSuite.rng">
    <fileset dir="${build.dir}/xsdtest" includes="xsdtest.xml"/>
  </jing>
  <xslt basedir="${build.dir}/xsdtest" destdir="${build.dir}/xsdtest" includes="xsdtest.xml"
        extension=".stamp" style="test/split.xsl">
    <param name="dir" expression="${build.dir}/xsdtest"/>
  </xslt>
</target>

<target name="regex-test" depends="jar" description="Test the regex implementation" >
  <jing rngfile="test/regextest.rnc" compactsyntax="true">
    <fileset dir="test" includes="regextest.xml"/>
  </jing>
<!--
  <ant antfile="regex-build.xml" target="test">
    <property name="classes.dir" value="${build.dir}/regex-classes"/>
  </ant>
-->
</target>

<target name="xerces-regex-test" depends="jar">
  <jing rngfile="test/regextest.rnc" compactsyntax="true">
    <fileset dir="test" includes="regextest.xml"/>
  </jing>
  <ant antfile="regex-build.xml" target="xerces-test">
    <property name="classes.dir" value="${build.dir}/regex-classes"/>
  </ant>
</target>

<target name="full-regex-test" description="Test (time-consumingly) the regex implementation" >
  <ant antfile="regex-build.xml" target="full-test">
    <property name="classes.dir" value="${build.dir}/regex-classes"/>
  </ant>
</target>

<target name="trang-test" depends="jar" description="Test Trang" >
  <ant dir="trang" target="test">
    <property name="build.dir" value="${build.dir}/trang"/>
    <property name="jar.dir" value="${build.dir}"/>
    <property name="lib.dir" value="${basedir}/lib"/>
  </ant>
</target>

<target name="javadoc" depends="init">
  <mkdir dir="${build.dir}/api"/>
  <mkdir dir="${build.dir}/api/datatype"/>
  <javadoc sourcepath="src" destdir="${build.dir}/api/datatype"
    doctitle="RELAX NG Datatype API" windowtitle="RELAX NG Datatype API"
    packagenames="org.relaxng.datatype,org.relaxng.datatype.helpers"/>
  <mkdir dir="${build.dir}/api/jing"/>
  <javadoc sourcepath="src" destdir="${build.dir}/api/jing"
    doctitle="Jing API" windowtitle="Jing API"
    packagenames="com.thaiopensource.validate,
                  com.thaiopensource.validate.rng,
                  com.thaiopensource.validate.xerces,
                  com.thaiopensource.validate.schematron,
                  com.thaiopensource.validate.nrl,
                  com.thaiopensource.validate.auto,
                  com.thaiopensource.xml.sax,
                  com.thaiopensource.util">
    <link offline="true" href="../datatype" packagelistLoc="${build.dir}/api/datatype"/>
    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="extapidoc/jdk/1.5"/>
  </javadoc>
</target>

<target name="doccheck" depends="init">
  <mkdir dir="${build.dir}/doccheck"/>
  <javadoc sourcepath="src"
           destdir="${build.dir}/doccheck"
           packagenames="com.thaiopensource.validate,
                         com.thaiopensource.validate.rng,
                         com.thaiopensource.validate.xerces,
                         com.thaiopensource.validate.schematron,
                         com.thaiopensource.validate.nrl,
                         com.thaiopensource.validate.auto,
                         com.thaiopensource.xml.sax,
                         com.thaiopensource.util"
           doclet="com.sun.tools.doclets.doccheck.DocCheck"
           docletpath="lib/doccheck.jar"/>
</target>

<target name="datatype-sample" depends="jar">
  <ant dir="datatype-sample">
    <property name="build.dir" value="${build.dir}/datatype-sample"/>
    <property name="jing.jar" value="${build.dir}/jing.jar"/>
  </ant>
</target>

<target name="doc">
  <xslt basedir="doc" destdir="${build.dir}" includes="derivative.xml"
        style="doc/derivative.xsl"/>
  <xslt basedir="doc" destdir="${build.dir}" includes="design.xml"
        style="doc/design.xsl"/>
  <xslt basedir="doc" destdir="${build.dir}" includes="nrl.xml"
        style="doc/nrl.xsl"/>
  <copy todir="${build.dir}">
    <fileset dir="doc" includes="*.html"/>
  </copy>
  <replace file="${build.dir}/jing.html" token="@VERSION@" value="${version}"/>
</target>

<target name="jing-dist" depends="jar,test,validate,javadoc,doc,datatype-sample">
  <mkdir dir="${build.dir}/jing-bin"/>
  <copy todir="${build.dir}/jing-bin">
    <fileset dir="doc/jing-bin" includes="readme.html"/>
  </copy>
  <replace file="${build.dir}/jing-bin/readme.html" token="@VERSION@" value="${version}"/>
  <zip zipfile="${build.dir}/jing-src.zip">
    <fileset dir="src" includes="**/*.java,**/*.jj,**/resources/*,META-INF/services/*"/>
    <fileset dir="${build.dir}/src" includes="**/*.java"/>
    <zipfileset dir="${build.dir}" includes="jing-manifest.txt" fullpath="META-INF/MANIFEST.MF"/>
  </zip>
  <zip zipfile="${build.dir}/dist/jing-${version}.zip">
    <zipfileset dir="${build.dir}" includes="jing.jar" prefix="jing-${version}/bin"/> 
    <zipfileset dir="lib" includes="saxon.jar,isorelax.jar,xercesImpl.jar,xml-apis.jar" 
                prefix="jing-${version}/bin"/> 
    <zipfileset dir="${build.dir}" includes="jing-src.zip" fullpath="jing-${version}/src.zip"/> 
    <zipfileset dir="${build.dir}" includes="api/**" prefix="jing-${version}/doc"/>
    <zipfileset dir="eg" includes="relaxng.rng,xslt.rng,relaxCore.rng,relaxCoreDatatypes.rng"
                prefix="jing-${version}/lib"/>
    <zipfileset dir="doc/compact" includes="relaxng.rnc" prefix="jing-${version}/lib"/>
    <zipfileset dir="src/com/thaiopensource/validate/schematron/resources"
                includes="schematron.rnc"
                prefix="jing-${version}/lib"/>
    <zipfileset dir="src/com/thaiopensource/validate/mns/resources"
                includes="mns.rng"
                prefix="jing-${version}/lib"/>
    <zipfileset dir="src/com/thaiopensource/validate/nrl/resources"
                includes="nrl.rng"
                prefix="jing-${version}/lib"/>
    <zipfileset dir="." includes="xhtml/**/*.rng,xhtml/index.html" prefix="jing-${version}/lib"/>
    <zipfileset dir="doc"
                includes="jing-ant.html,jing-datatypes.html,jing-other.html,pluggable-datatypes.html"
                prefix="jing-${version}/doc"/>
    <zipfileset dir="${build.dir}"
                includes="jing.html,nrl.html"
                prefix="jing-${version}/doc"/>
    <zipfileset dir="doc/jing-bin"
                includes="copying.html"
                prefix="jing-${version}/doc"/>
    <zipfileset dir="lib"
                includes="xerces.copying.txt,isorelax.copying.txt"
                prefix="jing-${version}/doc"/>
    <zipfileset dir="${build.dir}/jing-bin"
                includes="readme.html"
                prefix="jing-${version}"/>
    <zipfileset dir="datatype-sample" prefix="jing-${version}/sample/datatype"/>
    <zipfileset dir="${build.dir}/datatype-sample"
                includes="datatype-sample.jar"
                prefix="jing-${version}/sample/datatype"/>
  </zip>
  <checksum file="${build.dir}/dist/jing-${version}.zip" fileext=".md5"/>
</target>

<target name="website" depends="validate,javadoc,datatype-sample,doc"
  description="Build a .tar.gz containing the complete relaxng website" >
  <copy todir="${build.dir}">
    <fileset dir="." includes="xhtml/**/*.rng,xhtml/index.html"/>
    <fileset dir="." includes="copying.html"/>
    <fileset dir="convert" includes="from-relax.xsl,simplify.xsl"/>
    <fileset dir="eg" includes="relaxng.rng,xslt.rng,relaxCore.rng,relaxCoreDatatypes.rng"/>
  </copy>
  <mkdir dir="${build.dir}/compact"/>
  <copy todir="${build.dir}/compact">
    <fileset dir="doc/compact" includes="*.html"/>
  </copy>
  <copy file="doc/compact/relaxng.rnc"
        tofile="${build.dir}/compact/relaxng.rnc.txt"/>
  <zip zipfile="${build.dir}/testSuite.zip">
    <fileset dir="test" includes="index.html,spectest.xml,split.xsl,saxon.xsl,prep.xml"/>
    <fileset dir="eg" includes="testSuite.rng"/>
  </zip>
  <tar tarfile="${build.dir}/relaxng.tar" basedir="${build.dir}"
    includes="testSuite.zip,copying.txt,*.html,*.xsl,*.rng,xhtml/**,api/**,compact/**,dtdinst/**"/>
  <gzip zipfile="${build.dir}/dist/relaxng.tar.gz" src="${build.dir}/relaxng.tar"/>
</target>

<target name="clean" description="Remove all files created during the build process">
  <delete dir="${build.dir}"/>
</target>

</project>
