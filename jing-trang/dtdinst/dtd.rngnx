datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start = element doctype { decl* }

decl = 
  elementDecl 
  | attlistDecl
  | modelGroupDef
  | attributeGroupDef
  | enumGroupDef
  | datatypeDef
  | flagDef
  | nameSpecDef
  | overriddenDef
  | includedSection
  | ignoredSection
  | internalEntityDecl
  | processingInstruction

elementDecl = element element { nameSpec, modelGroup }

modelGroupDef = element modelGroup { name, modelGroup }

datatypeDef = element datatype { name, datatype }

flagDef = element flag { name, flag }

nameSpecDef = element nameSpec { name, nameSpec }

overriddenDef = element overridden { name, text }

includedSection = 
  element includedSection { attribute flag { xsd:NCName }?, decl* }

ignoredSection = 
  element ignoredSection { attribute flag { xsd:NCName }?, text }

internalEntityDecl = element internalEntity { name, text }

processingInstruction =
  element processingInstruction { attribute target { xsd:NCName }, text }

datatype =
  element basic { 
    attribute name {
      "CDATA" 
      | "NMTOKEN" | "NMTOKENS"
      | "ENTITY" | "ENTITIES"
      | "ID"
      | "IDREF" | "IDREFS"
    }
  }
  | element enumChoice { enumGroup }
  | element notation { enumGroup }
  | element datatypeRef { name }

enumGroup =
  (element enum { xsd:NMTOKEN }
   | element enumGroupRef { name } )*

enumGroupDef = element enumGroup { name, enumGroup }

flag =
  element include { empty }
  | element ignore { empty }
  | element flagRef { name }

attlistDecl = element attlist { nameSpec, attributeGroup }

attributeGroupDef = element attributeGroup { name, attributeGroup }

attributeGroup =
  (element attribute { nameSpec, datatype, attributeDefault }
   | element attributeGroupRef { name } )*

attributeDefault =
  element implied { empty }
  | element required { empty }
  | element default|fixed { text }

modelGroup =
  element modelGroupRef { name }
  | element elementRef { nameSpec }
  | element oneOrMore { modelGroup }
  | element zeroOrMore { modelGroup }
  | element optional { modelGroup }
  | element pcdata { empty }
  | element choice { (modelGroup, modelGroup+)? }
  | element sequence { (modelGroup, modelGroup+)? }

name = attribute name { xsd:NCName }

nameSpec = element name { xsd:Name } | element nameSpecRef { name }
