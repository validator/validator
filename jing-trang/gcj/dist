#!/bin/sh

set -e
jing_main=com.thaiopensource.relaxng.util.Driver
jing_test_main=com.thaiopensource.relaxng.util.TestDriver
trang_main=com.thaiopensource.relaxng.translate.Driver
trang_test_main=com.thaiopensource.relaxng.translate.test.CompactTestDriver
a_jing_file=src/com/thaiopensource/relaxng/Schema.java
crimson_version=1.1.3
xerces_version=2.3.0
build_dir=build/gcj
jing_version_properties=src/com/thaiopensource/relaxng/util/resources/Version.properties
trang_version_properties=trang/src/com/thaiopensource/relaxng/translate/resources/Version.properties
crimson_unwanted="
org/w3c
org/xml
org/apache/crimson/tree
org/apache/crimson/jaxp/DocumentBuilderImpl.java
org/apache/crimson/jaxp/DocumentBuilderFactoryImpl.java
javax/xml/parsers/DocumentBuilder.java
javax/xml/parsers/DocumentBuilderFactory.java
META-INF/services/javax.xml.parsers.DocumentBuilderFactory
META-INF/services/javax.xml.transform.TransformerFactory
META-INF/jaxp-javax.manifest
META-INF/manifest.crimson
"
jing_unwanted="
com/thaiopensource/datatype/xsd/regex/jdk1_4
com/thaiopensource/datatype/xsd/regex/xerces
com/thaiopensource/relaxng/jarv
com/thaiopensource/relaxng/util/JingTask.java
META-INF/services/org.iso_relax.verifier.VerifierFactoryLoader
"
jing_unwanted_in_trang="
com/thaiopensource/relaxng/impl
com/thaiopensource/relaxng/mns
com/thaiopensource/relaxng/auto
com/thaiopensource/relaxng/AbstractSchema.java
com/thaiopensource/relaxng/CompactSchemaLanguage.java
com/thaiopensource/relaxng/IncorrectSchemaException.java
com/thaiopensource/relaxng/SAXSchemaLanguage.java
com/thaiopensource/relaxng/SchemaFactory.java
com/thaiopensource/relaxng/Schema.java
com/thaiopensource/relaxng/SchemaLanguage.java
com/thaiopensource/relaxng/SchemaOptions.java
com/thaiopensource/relaxng/ValidatorHandler.java
com/thaiopensource/relaxng/util/Driver.java
com/thaiopensource/relaxng/util/ExegenDriver.java
com/thaiopensource/relaxng/util/TestDriver.java
com/thaiopensource/relaxng/util/ValidationEngine.java
"

if [ -f ../${a_jing_file} ]; then
    cd ..
elif [ ! -f ${a_jing_file} ]; then
    echo You are in the wrong directory >&2
    exit 1
fi

top_dir=`pwd`

rm -fr ${build_dir}
test -f ${build_dir} || mkdir -p ${build_dir}

. ${jing_version_properties}
jing_version=`echo $version | tr -d -`

. ${trang_version_properties}
trang_version=`echo $version | tr -d -`

jing_src_dir=${build_dir}/src/jing-${jing_version}
trang_src_dir=${build_dir}/src/trang-${trang_version}

mkdir -p ${jing_src_dir} ${trang_src_dir}

(ls src/META-INF/services/*.*; find src -name '*.java' -or -name '*.jj' -or -name '*.properties' -or -name '*.rng') | cpio --quiet -p -d ${jing_src_dir}

cd ${jing_src_dir}/src
rm -fr ${jing_unwanted}

echo com.thaiopensource.datatype.xsd.regex.xerces2.RegexEngineImpl >META-INF/services/com.thaiopensource.datatype.xsd.regex.RegexEngine

cd ${top_dir}
CLASSPATH=lib/JavaCC.zip gij COM.sun.labs.javacc.Main -output_directory=${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact  ${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact/CompactSyntax.jj >/dev/null

f=${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact/CompactSyntaxTokenManager.java
sed -e 's/java.io.IOException/EOFException/g' $f >${build_dir}/tem
mv ${build_dir}/tem $f


cd ${build_dir}
tar xfz ${top_dir}/gcj/crimson-${crimson_version}-src.tar.gz crimson-${crimson_version}/src
cd crimson-${crimson_version}/src

rm -fr ${crimson_unwanted}
find org javax -type f -not -name '*.java' -not -name '*.properties' | xargs rm -f

cd ${top_dir}
cp -a ${build_dir}/crimson-${crimson_version}/src/* ${jing_src_dir}/src
rm -fr ${build_dir}/crimson-${crimson_version}

cd ${build_dir}

xerces_top_dir=xerces-`echo ${xerces_version} | tr . _`
xerces_src_dir=${xerces_top_dir}/src

tar xfz ${top_dir}/gcj/Xerces-J-src.${xerces_version}.tar.gz ${xerces_src_dir}/org/apache/xerces/impl/xpath/regex
cd ${top_dir}
cp -a ${build_dir}/${xerces_src_dir}/* ${jing_src_dir}/src
rm -fr ${build_dir}/${xerces_top_dir}

cp -a ${jing_src_dir}/src ${trang_src_dir}

cd dtdinst
find src -name '*.java' -or -name '*.properties' | cpio --quiet -p -d ../${trang_src_dir}
cd ../trang
find src -name '*.java' -or -name '*.properties' | cpio --quiet -p -d ../${trang_src_dir}
cd ../${trang_src_dir}/src

rm -fr ${jing_unwanted_in_trang}

cd ${top_dir}

setup_prog() {

cd ${prog_src_dir}

cat <<EOF >Makefile.in
SHELL=/bin/sh
srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
GCJ=@GCJ@
GCJFLAGS=@GCJFLAGS@
LDFLAGS=@LDFLAGS@
INSTALL=@INSTALL@
NORMAL_INSTALL=:
PROG=${prog}
MAIN=${main}
TEST_MAIN=${test_main}
LIBS=

EOF
echo SOURCES=\\ >>Makefile.in
find src -name '*.java' | sed -e 's;^;  $(srcdir)/;' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

echo RESOURCES=\\ >>Makefile.in
find src -type f -not -name '*.java' -not -name '*.jj' | sed -e 's;^;  ;' -e 's/$/.o/' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

echo DIRS=src \\ >>Makefile.in

find src/* -type d -not -name '*.java' -not -name '*.jj' | sed -e 's;^;  ;' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

cat <<\EOF >>Makefile.in

all: $(PROG) test_$(PROG)

$(PROG): $(PROG).o $(RESOURCES)
	$(GCJ) $(GCJFLAGS) $(LDFLAGS) --main=$(MAIN) -o $@ $(PROG).o $(RESOURCES) $(LIBS)

test_$(PROG): $(PROG).o $(RESOURCES)
	$(GCJ) $(GCJFLAGS) $(LDFLAGS) --main=$(TEST_MAIN) -o $@ $(PROG).o $(RESOURCES) $(LIBS)

$(PROG).o: $(SOURCES)
	$(GCJ) $(GCJFLAGS) -c -o $@ $(SOURCES)

.resource.o:
	$(GCJ) $(GCJFLAGS) -c -o $@ --resource=`echo $@ | sed -e 's;src/;;' -e 's/.o$$//'` $<

$(RESOURCES): dirstamp

dirstamp:
	for d in $(DIRS); do test -d $$d || mkdir $$d; done
	@>$@

check: test_$(PROG)
	cd test; $(MAKE)

install: $(PROG)
	$(NORMAL_INSTALL)
	$(srcdir)/mkinstalldirs $(DESTDIR)$(bindir)
	$(INSTALL) $(PROG) $(DESTDIR)$(bindir)/$(PROG)

clean:
	-rm -f dirstamp $(PROG) $(PROG).o $(RESOURCES)
	-rmdir `for d in $(DIRS); do echo $$d; done | sort -r`
	cd test; $(MAKE) clean

$(srcdir)/configure: configure.ac
	cd $(srcdir) && autoconf
     
Makefile: Makefile.in config.status
	./config.status
     
config.status: configure
	./config.status --recheck

distclean: clean
	-rm -f config.status config.cache config.log

.SUFFIXES: .resource
.PHONY: all check distclean clean install
EOF

find src -type f -not -name '*.java' -not -name '*.jj' -exec mv "{}" "{}.resource" ";"

echo "AC_INIT(${prog}, ${prog_version})" >configure.ac
cat <<\EOF >>configure.ac
AC_PROG_INSTALL
AC_ARG_VAR([GCJ], [Java compiler command])
AC_ARG_VAR([GCJFLAGS], [Java compiler flags])
AC_ARG_VAR([LDFLAGS], [linker flags])
if test -z "$GCJ"; then
  AC_CHECK_TOOL(GCJ, gcj)
fi
test -z "$GCJ" && AC_MSG_ERROR([GCJ not found in \$PATH])
test "${GCJFLAGS+set}" = set || GCJFLAGS="-g -O2"
AC_CONFIG_FILES([Makefile test/Makefile])
AC_OUTPUT
EOF

cp -a ${top_dir}/gcj/install-sh .
cp -a ${top_dir}/gcj/mkinstalldirs .
cp -a ${top_dir}/gcj/INSTALL .

autoconf

rm -fr autom4te*

sed -e "/^Version:/s/:.*/: ${prog_version}/" ${top_dir}/gcj/${prog}.spec >${prog}.spec
cat >copying.txt <<EOF
Except as otherwise stated, the following license applies to this software.

EOF
sed -e 's/^/  /' ${copying} >>copying.txt
cat >>copying.txt <<EOF

The XML parser used is Crimson, to which the following license applies.

EOF
sed -e 's/^/  /' ${top_dir}/gcj/crimson.copying.txt >>copying.txt

cat >>copying.txt <<EOF

The W3C XML Schema regular expression implementation is from Xerces,
to which the following license applies.

EOF
sed -e 's/^/  /' ${top_dir}/gcj/xerces.copying.txt >>copying.txt

cp -a ${top_dir}/gcj/README.redhat8 .
mkdir test
}

prog=jing
main=${jing_main}
test_main=${jing_test_main}
prog_version=${jing_version}
prog_src_dir=${jing_src_dir}
copying=${top_dir}/copying.txt
setup_prog

cd test

cp -a ${top_dir}/test/dir.xsl .
cp -a ${top_dir}/test/exslt.xsl .
cp -a ${top_dir}/test/prep.xsl .
cp -a ${top_dir}/test/spectest.xml .

cat <<\EOF >Makefile.in
srcdir=@srcdir@
XSLTPROC=xsltproc

check: split/stamp
	../test_jing test.log split

prepped.xml: $(srcdir)/spectest.xml $(srcdir)/prep.xsl
	$(XSLTPROC) -o $@ --stringparam dir split $(srcdir)/prep.xsl $(srcdir)/spectest.xml 2>/dev/null

split/stamp: prepped.xml   $(srcdir)/exslt.xsl
	-mkdir split
	-mkdir `$(XSLTPROC) $(srcdir)/dir.xsl prepped.xml 2>/dev/null`
	$(XSLTPROC) $(srcdir)/exslt.xsl prepped.xml 2>/dev/null
	@>$@

clean:
	-rm -fr split prepped.xml
EOF

cd ${top_dir}
prog=trang
main=${trang_main}
test_main=${trang_test_main}
prog_version=${trang_version}
prog_src_dir=${trang_src_dir}
copying=${top_dir}/trang/copying.txt
setup_prog
sed -e "s/@VERSION@/${trang_version}/g" ${top_dir}/trang/doc/trang-manual.html >trang-manual.html
cd test

cp -a ${top_dir}/trang/test/compacttest.xml .
cp -a ${top_dir}/trang/test/toxsdtest.xml .
cp -a ${top_dir}/test/dir.xsl .
cp -a ${top_dir}/test/exslt.xsl .
cp -a ${top_dir}/trang/test/compactprep.xsl prep.xsl

cat <<\EOF >Makefile.in
srcdir=@srcdir@
XSLTPROC=xsltproc
FIXCR=sed -e "s/`echo x | tr x '\015'`/\\&\#xD;/g"

check: compact-check xsd-check

compact-check: compact-split/stamp
	../test_trang xsd.log compact-split xml

xsd-check: xsd-split/stamp
	../test_trang compact.log xsd-split xsd

compact-prepped.xml: $(srcdir)/compacttest.xml $(srcdir)/prep.xsl
	$(XSLTPROC) --stringparam dir compact-split $(srcdir)/prep.xsl $(srcdir)/compacttest.xml | $(FIXCR) >$@

compact-split/stamp: compact-prepped.xml $(srcdir)/exslt.xsl $(srcdir)/dir.xsl
	-mkdir `$(XSLTPROC) $(srcdir)/dir.xsl compact-prepped.xml`
	$(XSLTPROC) $(srcdir)/exslt.xsl compact-prepped.xml
	@for f in compact-split/*/xml/c.rng; do \
	  $(FIXCR) $$f >tem; mv tem $$f; \
	done
# Work around another bug in xsltproc
	@f=`grep -l ' foo="val"' compact-split/*/xml/c.rng`; \
	if [ -f "$$f" ] ; then \
	  sed -e 's/ foo=/ rng:foo=/' $$f >tem; mv tem $$f; \
	fi
	@>$@

xsd-prepped.xml: $(srcdir)/toxsdtest.xml $(srcdir)/prep.xsl
	$(XSLTPROC) -o $@ --stringparam dir xsd-split $(srcdir)/prep.xsl $(srcdir)/toxsdtest.xml

xsd-split/stamp: xsd-prepped.xml $(srcdir)/exslt.xsl $(srcdir)/dir.xsl
	-mkdir `$(XSLTPROC) $(srcdir)/dir.xsl xsd-prepped.xml`
	$(XSLTPROC) $(srcdir)/exslt.xsl xsd-prepped.xml
	@>$@

clean:
	-rm -fr compact-split xsd-split compact-prepped.xml xsd-prepped.xml

.PHONY: check xsd-check compact-check clean
EOF

cd ${top_dir}
cd ${jing_src_dir}/..
tar cfz jing-${jing_version}.tar.gz  jing-${jing_version}
cd ${top_dir}
cd ${trang_src_dir}/..
tar cfz trang-${trang_version}.tar.gz  trang-${trang_version}
