#!/bin/sh

set -e
jing_main=com.thaiopensource.relaxng.util.Driver
trang_main=com.thaiopensource.relaxng.translate.Driver
a_jing_file=src/com/thaiopensource/relaxng/Schema.java
crimson_version=1.1.3
xerces_version=2.3.0
build_dir=build/gcj
jing_version_properties=src/com/thaiopensource/relaxng/util/resources/Version.properties
trang_version_properties=trang/src/com/thaiopensource/relaxng/translate/resources/Version.properties
crimson_unwanted="
org/w3c
org/xml
org/apache/crimson/tree
org/apache/crimson/jaxp/DocumentBuilderImpl.java
org/apache/crimson/jaxp/DocumentBuilderFactoryImpl.java
javax/xml/parsers/DocumentBuilder.java
javax/xml/parsers/DocumentBuilderFactory.java
META-INF/services/javax.xml.parsers.DocumentBuilderFactory
META-INF/services/javax.xml.transform.TransformerFactory
META-INF/jaxp-javax.manifest
META-INF/manifest.crimson
"
jing_unwanted="
com/thaiopensource/datatype/xsd/regex/jdk1_4
com/thaiopensource/datatype/xsd/regex/xerces
com/thaiopensource/relaxng/jarv
com/thaiopensource/relaxng/util/JingTask.java
META-INF/services/org.iso_relax.verifier.VerifierFactoryLoader
"

if [ -f ../${a_jing_file} ]; then
    cd ..
elif [ ! -f ${a_jing_file} ]; then
    echo You are in the wrong directory >&2
    exit 1
fi

top_dir=`pwd`

rm -fr ${build_dir}
test -f ${build_dir} || mkdir -p ${build_dir}

. ${jing_version_properties}
jing_version=`echo $version | tr -d -`

. ${trang_version_properties}
trang_version=`echo $version | tr -d -`

jing_src_dir=${build_dir}/src/jing-${jing_version}
trang_src_dir=${build_dir}/src/trang-${trang_version}

mkdir -p ${jing_src_dir} ${trang_src_dir}

(ls src/META-INF/services/*.*; find src -name '*.java' -or -name '*.jj' -or -name '*.properties' -or -name '*.rng') | cpio --quiet -p -d ${jing_src_dir}

cd ${jing_src_dir}/src
rm -fr ${jing_unwanted}

echo com.thaiopensource.datatype.xsd.regex.xerces2.RegexEngineImpl >META-INF/services/com.thaiopensource.datatype.xsd.regex.RegexEngine

cd ${top_dir}
CLASSPATH=lib/JavaCC.zip gij COM.sun.labs.javacc.Main -output_directory=${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact  ${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact/CompactSyntax.jj >/dev/null

f=${jing_src_dir}/src/com/thaiopensource/relaxng/parse/compact/CompactSyntaxTokenManager.java
sed -e 's/java.io.IOException/EOFException/g' $f >${build_dir}/tem
mv ${build_dir}/tem $f


cd ${build_dir}
tar xfz ${top_dir}/gcj/crimson-${crimson_version}-src.tar.gz crimson-${crimson_version}/src
cd crimson-${crimson_version}/src

rm -fr ${crimson_unwanted}
find org javax -type f -not -name '*.java' -not -name '*.properties' | xargs rm -f

cd ${top_dir}
cp -a ${build_dir}/crimson-${crimson_version}/src/* ${jing_src_dir}/src
rm -fr ${build_dir}/crimson-${crimson_version}

cd ${build_dir}

xerces_top_dir=xerces-`echo ${xerces_version} | tr . _`
xerces_src_dir=${xerces_top_dir}/src

tar xfz ${top_dir}/gcj/Xerces-J-src.${xerces_version}.tar.gz ${xerces_src_dir}/org/apache/xerces/impl/xpath/regex
cd ${top_dir}
cp -a ${build_dir}/${xerces_src_dir}/* ${jing_src_dir}/src
rm -fr ${build_dir}/${xerces_top_dir}

cp -a ${jing_src_dir}/src ${trang_src_dir}

cd dtdinst
find src -name '*.java' -or -name '*.properties' | cpio --quiet -p -d ../${trang_src_dir}
cd ../trang
find src -name '*.java' -or -name '*.properties' | cpio --quiet -p -d ../${trang_src_dir}
cd ..


setup_prog() {

cd ${prog_src_dir}

cat <<EOF >Makefile.in
srcdir = @srcdir@/src
VPATH = @srcdir@/src
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
GCJ=@GCJ@
GCJFLAGS=@GCJFLAGS@
LDFLAGS=@LDFLAGS@

PROG=${prog}
MAIN=${main}
LIBS=


EOF
echo SOURCES=\\ >>Makefile.in
find src -name '*.java' | sed -e 's/^src/  $(srcdir)/' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

echo RESOURCES=\\ >>Makefile.in
find src -type f -not -name '*.java' -not -name '*.jj' | sed -e 's;^src/;  ;' -e 's/$/.o/' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

echo DIRS=\\ >>Makefile.in

find src/* -type d -not -name '*.java' -not -name '*.jj' | sed -e 's;^src/;  ;' -e 's/$/ \\/' -e '$s/ \\//' >>Makefile.in

cat <<\EOF >>Makefile.in

$(PROG): $(PROG).o $(RESOURCES)
	$(GCJ) $(GCJFLAGS) $(LDFLAGS) --main=$(MAIN) -o $@ $(PROG).o $(RESOURCES) $(LIBS)

$(PROG).o: $(SOURCES)
	$(GCJ) $(GCJFLAGS) -c -o $@ $(SOURCES)

.resource.o:
	$(GCJ) $(GCJFLAGS) -c -o $@ --resource=`echo $@ | sed -e 's/.o$$//'` $<

$(RESOURCES): dirstamp

dirstamp:
	mkdir $(DIRS)
	@>$@

clean:
	-rm -f dirstamp $(PROG) $(PROG).o $(RESOURCES)
	-rmdir `for d in $(DIRS); do echo $$d; done | sort -r`


.SUFFIXES: .resource
EOF

find src -type f -not -name '*.java' -not -name '*.jj' -exec mv "{}" "{}.resource" ";"

echo "AC_INIT(${prog}, ${prog_version})" >configure.ac
cat <<\EOF >>configure.ac
AC_ARG_VAR([GCJ], [Java compiler command])
AC_ARG_VAR([GCJFLAGS], [Java compiler flags])
AC_ARG_VAR([LDFLAGS], [linker flags])
if test -z "$GCJ"; then
  AC_CHECK_TOOL(GCJ, gcj)
fi
test -z "$GCJ" && AC_MSG_ERROR([GCJ not found in \$PATH])
test "${GCJFLAGS+set}" = set || GCJFLAGS="-g -O2"
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
EOF

autoconf

rm -fr autom4te*

}

prog=jing
main=${jing_main}
prog_version=${jing_version}
prog_src_dir=${jing_src_dir}
setup_prog
cd ${top_dir}
prog=trang
main=${trang_main}
prog_version=${trang_version}
prog_src_dir=${trang_src_dir}
setup_prog
